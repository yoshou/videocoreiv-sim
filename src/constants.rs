
pub const ADDOP_NOP		: u8 = 0b00000;
pub const ADDOP_FADD	: u8 = 0b00001;
pub const ADDOP_FSUB	: u8 = 0b00010;
pub const ADDOP_FMIN	: u8 = 0b00011;
pub const ADDOP_FMAX	: u8 = 000100;
pub const ADDOP_FMINABS	: u8 = 0b00101;
pub const ADDOP_FMAXABS	: u8 = 0b00110;
pub const ADDOP_FTOI	: u8 = 0b00111;
pub const ADDOP_ITOF	: u8 = 0b01000;
pub const ADDOP_ADD		: u8 = 0b01100;
pub const ADDOP_SUB		: u8 = 0b01101;
pub const ADDOP_SHR		: u8 = 0b01110;
pub const ADDOP_ASR		: u8 = 0b01111;
pub const ADDOP_ROR		: u8 = 0b10000;
pub const ADDOP_SHL		: u8 = 0b10001;
pub const ADDOP_MIN		: u8 = 0b10010;
pub const ADDOP_MAX		: u8 = 0b10011;
pub const ADDOP_AND		: u8 = 0b10100;
pub const ADDOP_OR		: u8 = 0b10101;
pub const ADDOP_XOR		: u8 = 0b10110;
pub const ADDOP_NOT		: u8 = 0b10111;
pub const ADDOP_CLZ		: u8 = 0b11000;
pub const ADDOP_V8ADDS	: u8 = 0b11110;
pub const ADDOP_V8SUBS	: u8 = 0b11111;
    
pub const MULOP_NOP		: u8 = 0b000;
pub const MULOP_FMUL	: u8 = 0b001;
pub const MULOP_MUL24	: u8 = 0b010;
pub const MULOP_V8MULD	: u8 = 0b011;
pub const MULOP_V8MIN	: u8 = 0b100;
pub const MULOP_V8MAX	: u8 = 0b101;
pub const MULOP_V8ADDS	: u8 = 0b110;
pub const MULOP_V8SUBS	: u8 = 0b111;

pub const SIG_BPKT	: u8 = 0b0000;	// software breakpoint
pub const SIG_NOP		: u8 = 0b0001;	// no signal
pub const SIG_THRSW	: u8 = 0b0010;	// thread switch (not last)
pub const SIG_THREND	: u8 = 0b0011;	// program end (thread end)
pub const SIG_SBWAIT	: u8 = 0b0100;	// wait for scoreboard (stall until this QPU can safely access tile buffer)
pub const SIG_SBDONE	: u8 = 0b0101;	// scoreboard unlock
pub const SIG_LTHRSW	: u8 = 0b0110;	// last thread switch
pub const SIG_LOADCV	: u8 = 0b0111;	// coverage load from tile buffer to r4
pub const SIG_LOADC	: u8 = 0b1000;	// color load from tile buffer to r4
pub const SIG_LDCEND	: u8 = 0b1001;	// color load and program end
pub const SIG_LDTMU0	: u8 = 0b1010;	// load (read) data from TMU0 to r4
pub const SIG_LDTMU1	: u8 = 0b1011;	// load (read) data from TMU1 to r4
pub const SIG_LOADAM	: u8 = 0b1100;	// alpha-mask load from tile buffer to r4
pub const SIG_NOPSI	: u8 = 0b1101;	// alu instruction with raddr_b specifying small immediate or vector rotate
pub const SIG_LDI		: u8 = 0b1110;	// load immediate instruction
pub const SIG_BRA		: u8 = 0b1111;	// branch instruction

pub const ALU_SRC_R0: u8 = 0b000;
pub const ALU_SRC_R1: u8 = 0b001;
pub const ALU_SRC_R2: u8 = 0b010;
pub const ALU_SRC_R3: u8 = 0b011;
pub const ALU_SRC_R4: u8 = 0b100;
pub const ALU_SRC_R5: u8 = 0b101;
pub const ALU_SRC_RA: u8 = 0b110;
pub const ALU_SRC_RB: u8 = 0b111;

pub const COND_NEVER	: u8 = 0b000;
pub const COND_ALWAYS	: u8 = 0b001;
pub const COND_ZS		: u8 = 0b010;
pub const COND_ZC		: u8 = 0b011;
pub const COND_NS		: u8 = 0b100;
pub const COND_NC		: u8 = 0b101;
pub const COND_CS		: u8 = 0b110;
pub const COND_CC		: u8 = 0b111;

pub const COND_BR_ZS: u8 = 0b0000;
pub const COND_BR_ZC: u8 = 0b0001;
pub const COND_BR_ANYZS: u8 = 0b0010;
pub const COND_BR_ANYZC: u8 = 0b0011;
pub const COND_BR_NS: u8 = 0b0100;
pub const COND_BR_NC: u8 = 0b0101;
pub const COND_BR_ANYNS: u8 = 0b0110;
pub const COND_BR_ANYNC: u8 = 0b0111;
pub const COND_BR_CS: u8 = 0b1000;
pub const COND_BR_CC: u8 = 0b1001;
pub const COND_BR_ANYCS: u8 = 0b1010;
pub const COND_BR_ANYCC: u8 = 0b1011;
pub const COND_BR_ALWAYS: u8 = 0b1111;

pub const RA_RA0 : u8 = 0b000000;
pub const RA_RA1 : u8 = 0b000001;
pub const RA_RA2 : u8 = 0b000010;
pub const RA_RA3 : u8 = 0b000011;
pub const RA_RA4 : u8 = 0b000100;
pub const RA_RA5 : u8 = 0b000101;
pub const RA_RA6 : u8 = 0b000110;
pub const RA_RA7 : u8 = 0b000111;
pub const RA_RA8 : u8 = 0b001000;
pub const RA_RA9 : u8 = 0b001001;
pub const RA_RA10 : u8 = 0b001010;
pub const RA_RA11 : u8 = 0b001011;
pub const RA_RA12 : u8 = 0b001100;
pub const RA_RA13 : u8 = 0b001101;
pub const RA_RA14 : u8 = 0b001110;
pub const RA_RA15 : u8 = 0b001111;
pub const RA_RA16 : u8 = 0b010000;
pub const RA_RA17 : u8 = 0b010001;
pub const RA_RA18 : u8 = 0b010010;
pub const RA_RA19 : u8 = 0b010011;
pub const RA_RA20 : u8 = 0b010100;
pub const RA_RA21 : u8 = 0b010101;
pub const RA_RA22 : u8 = 0b010110;
pub const RA_RA23 : u8 = 0b010111;
pub const RA_RA24 : u8 = 0b011000;
pub const RA_RA25 : u8 = 0b011001;
pub const RA_RA26 : u8 = 0b011010;
pub const RA_RA27 : u8 = 0b011011;
pub const RA_RA28 : u8 = 0b011100;
pub const RA_RA29 : u8 = 0b011101;
pub const RA_RA30 : u8 = 0b011110;
pub const RA_RA31 : u8 = 0b011111;

pub const RA_UNIFORM_READ : u8 = 0b100000;
pub const RA_VARYING_READ : u8 = 0b100011;
pub const RA_ELEMENT_NUMBER : u8 = 0b100110;
pub const RA_NOP : u8 = 0b100111;
pub const RA_X_PIXEL_COORD : u8 = 0b101001;
pub const RA_MS_FLAGS : u8 = 0b101010;
pub const RA_VPM_READ : u8 = 0b110000;
pub const RA_VPM_LD_BUSY : u8 = 0b110001;
pub const RA_VPM_LD_WAIT : u8 = 0b110010;
pub const RA_MUTEX_ACQUIRE : u8 = 0b110011;

pub const RB_RB0 : u8 = 0b000000;
pub const RB_RB1 : u8 = 0b000001;
pub const RB_RB2 : u8 = 0b000010;
pub const RB_RB3 : u8 = 0b000011;
pub const RB_RB4 : u8 = 0b000100;
pub const RB_RB5 : u8 = 0b000101;
pub const RB_RB6 : u8 = 0b000110;
pub const RB_RB7 : u8 = 0b000111;
pub const RB_RB8 : u8 = 0b001000;
pub const RB_RB9 : u8 = 0b001001;
pub const RB_RB10 : u8 = 0b001010;
pub const RB_RB11 : u8 = 0b001011;
pub const RB_RB12 : u8 = 0b001100;
pub const RB_RB13 : u8 = 0b001101;
pub const RB_RB14 : u8 = 0b001110;
pub const RB_RB15 : u8 = 0b001111;
pub const RB_RB16 : u8 = 0b010000;
pub const RB_RB17 : u8 = 0b010001;
pub const RB_RB18 : u8 = 0b010010;
pub const RB_RB19 : u8 = 0b010011;
pub const RB_RB20 : u8 = 0b010100;
pub const RB_RB21 : u8 = 0b010101;
pub const RB_RB22 : u8 = 0b010110;
pub const RB_RB23 : u8 = 0b010111;
pub const RB_RB24 : u8 = 0b011000;
pub const RB_RB25 : u8 = 0b011001;
pub const RB_RB26 : u8 = 0b011010;
pub const RB_RB27 : u8 = 0b011011;
pub const RB_RB28 : u8 = 0b011100;
pub const RB_RB29 : u8 = 0b011101;
pub const RB_RB30 : u8 = 0b011110;
pub const RB_RB31 : u8 = 0b011111;

pub const RB_UNIFORM_READ : u8 = 0b100000;
pub const RB_VARYING_READ : u8 = 0b100011;
pub const RB_QPU_NUMBER : u8 = 0b100110;
pub const RB_NOP : u8 = 0b100111;
pub const RB_Y_PIXEL_COORD : u8 = 0b101001;
pub const RB_REV_FLAG : u8 = 0b101010;
pub const RB_VPM_READ : u8 = 0b110000;
pub const RB_VPM_ST_BUSY : u8 = 0b110001;
pub const RB_VPM_ST_WAIT : u8 = 0b110010;
pub const RB_MUTEX_ACQUIRE : u8 = 0b110011;

pub const WA_RA0 : u8 = 0b000000;
pub const WA_RA1 : u8 = 0b000001;
pub const WA_RA2 : u8 = 0b000010;
pub const WA_RA3 : u8 = 0b000011;
pub const WA_RA4 : u8 = 0b000100;
pub const WA_RA5 : u8 = 0b000101;
pub const WA_RA6 : u8 = 0b000110;
pub const WA_RA7 : u8 = 0b000111;
pub const WA_RA8 : u8 = 0b001000;
pub const WA_RA9 : u8 = 0b001001;
pub const WA_RA10 : u8 = 0b001010;
pub const WA_RA11 : u8 = 0b001011;
pub const WA_RA12 : u8 = 0b001100;
pub const WA_RA13 : u8 = 0b001101;
pub const WA_RA14 : u8 = 0b001110;
pub const WA_RA15 : u8 = 0b001111;
pub const WA_RA16 : u8 = 0b010000;
pub const WA_RA17 : u8 = 0b010001;
pub const WA_RA18 : u8 = 0b010010;
pub const WA_RA19 : u8 = 0b010011;
pub const WA_RA20 : u8 = 0b010100;
pub const WA_RA21 : u8 = 0b010101;
pub const WA_RA22 : u8 = 0b010110;
pub const WA_RA23 : u8 = 0b010111;
pub const WA_RA24 : u8 = 0b011000;
pub const WA_RA25 : u8 = 0b011001;
pub const WA_RA26 : u8 = 0b011010;
pub const WA_RA27 : u8 = 0b011011;
pub const WA_RA28 : u8 = 0b011100;
pub const WA_RA29 : u8 = 0b011101;
pub const WA_RA30 : u8 = 0b011110;
pub const WA_RA31 : u8 = 0b011111;

pub const WA_ACC0 : u8 = 0b100000;
pub const WA_ACC1 : u8 = 0b100001;
pub const WA_ACC2 : u8 = 0b100010;
pub const WA_ACC3 : u8 = 0b100011;
pub const WA_TMU_NOSWAP : u8 = 0b100100;
pub const WA_ACC5 : u8 = 0b100101;
pub const WA_HOST_INT : u8 = 0b100110;
pub const WA_NOP : u8 = 0b100111;
pub const WA_UNIFORMS_ADDRESS : u8 = 0b101000;
pub const WA_VPM_WRITE : u8 = 0b110000;
pub const WA_VPMVCD_RD_SETUP : u8 = 0b110001;
pub const WA_VPM_LD_ADDR : u8 = 0b110010;
pub const WA_MUTEX_RELEASE : u8 = 0b110011;
pub const WA_TMU0_S : u8 = 0b111000;
pub const WA_TMU0_T : u8 = 0b111001;
pub const WA_TMU0_R : u8 = 0b111010;
pub const WA_TMU0_B : u8 = 0b111011;
pub const WA_TMU1_S : u8 = 0b111100;
pub const WA_TMU1_T : u8 = 0b111101;
pub const WA_TMU1_R : u8 = 0b111110;
pub const WA_TMU1_B : u8 = 0b111111;

pub const WB_RB0 : u8 = 0b000000;
pub const WB_RB1 : u8 = 0b000001;
pub const WB_RB2 : u8 = 0b000010;
pub const WB_RB3 : u8 = 0b000011;
pub const WB_RB4 : u8 = 0b000100;
pub const WB_RB5 : u8 = 0b000101;
pub const WB_RB6 : u8 = 0b000110;
pub const WB_RB7 : u8 = 0b000111;
pub const WB_RB8 : u8 = 0b001000;
pub const WB_RB9 : u8 = 0b001001;
pub const WB_RB10 : u8 = 0b001010;
pub const WB_RB11 : u8 = 0b001011;
pub const WB_RB12 : u8 = 0b001100;
pub const WB_RB13 : u8 = 0b001101;
pub const WB_RB14 : u8 = 0b001110;
pub const WB_RB15 : u8 = 0b001111;
pub const WB_RB16 : u8 = 0b010000;
pub const WB_RB17 : u8 = 0b010001;
pub const WB_RB18 : u8 = 0b010010;
pub const WB_RB19 : u8 = 0b010011;
pub const WB_RB20 : u8 = 0b010100;
pub const WB_RB21 : u8 = 0b010101;
pub const WB_RB22 : u8 = 0b010110;
pub const WB_RB23 : u8 = 0b010111;
pub const WB_RB24 : u8 = 0b011000;
pub const WB_RB25 : u8 = 0b011001;
pub const WB_RB26 : u8 = 0b011010;
pub const WB_RB27 : u8 = 0b011011;
pub const WB_RB28 : u8 = 0b011100;
pub const WB_RB29 : u8 = 0b011101;
pub const WB_RB30 : u8 = 0b011110;
pub const WB_RB31 : u8 = 0b011111;

pub const WB_ACC0 : u8 = 0b100000;
pub const WB_ACC1 : u8 = 0b100001;
pub const WB_ACC2 : u8 = 0b100010;
pub const WB_ACC3 : u8 = 0b100011;
pub const WB_TMU_NOSWAP : u8 = 0b100100;
pub const WB_ACC5 : u8 = 0b100101;
pub const WB_HOST_INT : u8 = 0b100110;
pub const WB_NOP : u8 = 0b100111;
pub const WB_UNIFORMS_ADDRESS : u8 = 0b101000;
pub const WB_VPM_WRITE : u8 = 0b110000;
pub const WB_VPMVCD_WR_SETUP : u8 = 0b110001;
pub const WB_VPM_ST_ADDR : u8 = 0b110010;
pub const WB_MUTEX_RELEASE : u8 = 0b110011;
pub const WB_TMU0_S : u8 = 0b111000;
pub const WB_TMU0_T : u8 = 0b111001;
pub const WB_TMU0_R : u8 = 0b111010;
pub const WB_TMU0_B : u8 = 0b111011;
pub const WB_TMU1_S : u8 = 0b111100;
pub const WB_TMU1_T : u8 = 0b111101;
pub const WB_TMU1_R : u8 = 0b111110;
pub const WB_TMU1_B : u8 = 0b111111;